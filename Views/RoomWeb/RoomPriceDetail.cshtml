@using HotelManagement.Models.Common
@model HotelManagement.Services.Dto.RoomPriceResponseModel
@{
    ViewData["Title"] = "Room Price Details";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container-fluid py-4">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <div>
                    <h2 class="mb-1">
                        <i class="fas fa-dollar-sign text-success"></i> Room Price Details
                    </h2>
                    <p class="text-muted mb-0">View and manage room pricing information</p>
                </div>
                <a asp-action="ListRoomPrice" class="btn btn-secondary">
                    <i class="fas fa-arrow-left"></i> Back to List
                </a>
            </div>
            
            @if (TempData["SuccessMessage"] != null)
            {
                <div class="alert alert-success alert-dismissible fade show shadow-sm" role="alert">
                    <i class="fas fa-check-circle me-2"></i>
                    <strong>Success!</strong> @TempData["SuccessMessage"]
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                </div>
            }

            @if (TempData["ErrorMessage"] != null)
            {
                <div class="alert alert-danger alert-dismissible fade show shadow-sm" role="alert">
                    <i class="fas fa-exclamation-circle me-2"></i>
                    <strong>Error!</strong> @TempData["ErrorMessage"]
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                </div>
            }

            @if (TempData["ValidationErrors"] != null)
            {
                var errors = System.Text.Json.JsonSerializer.Deserialize<List<string>>(TempData["ValidationErrors"].ToString());
                <div class="alert alert-danger alert-dismissible fade show shadow-sm">
                    <i class="fas fa-exclamation-triangle me-2"></i>
                    <strong>Validation Errors:</strong>
                    <ul class="mb-0 mt-2">
                        @foreach (var error in errors)
                        {
                            <li>@error</li>
                        }
                    </ul>
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                </div>
            }

            <div class="row">
                <div class="col-lg-4 mb-4">
                    <div class="card shadow-sm border-0 text-center">
                        <div class="card-body py-5">
                            <div class="price-icon-large mb-4">
                                <i class="fas fa-tags fa-5x text-success"></i>
                            </div>
                            
                            <div class="price-highlight mb-4">
                                <h2 class="text-success mb-0">
                                    $@Model.PricePerNight.ToString("N2")
                                </h2>
                                <small class="text-muted">per night</small>
                            </div>
                            
                            <span class="badge bg-@(GetSeasonColor(Model.SeasonName)) fs-6 mb-3">
                                @GetSeasonIcon(Model.SeasonName) @GetSeasonDisplay(Model.SeasonName)
                            </span>
                            
                            <div class="mb-4">
                                <span class="badge bg-@(Model.IsActive ? "success" : "secondary") fs-6">
                                    <i class="fas fa-circle fa-xs"></i> @(Model.IsActive ? "Active" : "Inactive")
                                </span>
                            </div>
                            
                            <div class="d-grid gap-2">
                                <button type="button" class="btn btn-outline-primary" data-bs-toggle="modal" data-bs-target="#editModal">
                                    <i class="fas fa-edit"></i> Edit Price
                                </button>
                                
                                <button type="button" class="btn btn-outline-@(Model.IsActive ? "warning" : "success")" data-bs-toggle="modal" data-bs-target="#toggleStatusModal">
                                    <i class="fas fa-@(Model.IsActive ? "ban" : "check")"></i>
                                    @(Model.IsActive ? "Deactivate" : "Activate")
                                </button>
                                
                                <button type="button" class="btn btn-outline-danger" data-bs-toggle="modal" data-bs-target="#deleteModal">
                                    <i class="fas fa-trash"></i> Delete Price
                                </button>
                            </div>
                        </div>
                    </div>

                    <!-- Quick Info Card -->
                    <div class="card shadow-sm border-0 mt-3">
                        <div class="card-header bg-light">
                            <h6 class="mb-0">
                                <i class="fas fa-info-circle"></i> Quick Information
                            </h6>
                        </div>
                        <div class="card-body">
                            <div class="info-item mb-3 pb-3 border-bottom">
                                <small class="text-muted d-block mb-1">Price ID</small>
                                <code class="text-primary">@Model.Id.ToString().Substring(0, 13)...</code>
                            </div>
                            <div class="info-item mb-3 pb-3 border-bottom">
                                <small class="text-muted d-block mb-1">Priority Level</small>
                                <strong>
                                    <span class="badge bg-primary">Level @Model.Priority</span>
                                </strong>
                            </div>
                            <div class="info-item mb-3 pb-3 border-bottom">
                                <small class="text-muted d-block mb-1">Created Date</small>
                                <strong>@Model.CreatedAt.ToString("MMM dd, yyyy")</strong>
                            </div>
                            <div class="info-item">
                                <small class="text-muted d-block mb-1">Last Updated</small>
                                <strong>@(Model.UpdatedAt?.ToString("MMM dd, yyyy") ?? "Never")</strong>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Right Column - Details -->
                <div class="col-lg-8">
                    <!-- Room & Type Information -->
                    <div class="card shadow-sm border-0 mb-3">
                        <div class="card-header bg-light">
                            <h5 class="mb-0">
                                <i class="fas fa-door-open"></i> Room & Type Information
                            </h5>
                        </div>
                        <div class="card-body">
                            <div class="row">
                                <div class="col-md-6 mb-4">
                                    <label class="text-muted small mb-1">
                                        <i class="fas fa-bed"></i> Room Type
                                    </label>
                                    <div class="fw-bold fs-5">
                                        <a asp-action="RoomTypeDetail" asp-route-id="@Model.RoomTypeId" class="text-decoration-none">
                                            @Model.RoomTypeName
                                            <i class="fas fa-external-link-alt fa-xs"></i>
                                        </a>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Price Details Card -->
                    <div class="card shadow-sm border-0 mb-3">
                        <div class="card-header bg-light">
                            <h5 class="mb-0">
                                <i class="fas fa-dollar-sign"></i> Price Details
                            </h5>
                        </div>
                        <div class="card-body">
                            <div class="row">
                                <div class="col-md-6 mb-4">
                                    <label class="text-muted small mb-1">
                                        <i class="fas fa-money-bill-wave"></i> Price per Night
                                    </label>
                                    <div class="fw-bold text-success fs-3">
                                        $@Model.PricePerNight.ToString("N2")
                                    </div>
                                </div>
                                <div class="col-md-6 mb-4">
                                    <label class="text-muted small mb-1">
                                        <i class="fas fa-tag"></i> Season Type
                                    </label>
                                    <div>
                                        <span class="badge bg-@(GetSeasonColor(Model.SeasonName)) fs-5 px-3 py-2">
                                            @GetSeasonIcon(Model.SeasonName) @GetSeasonDisplay(Model.SeasonName)
                                        </span>
                                    </div>
                                </div>
                                <div class="col-md-6 mb-4">
                                    <label class="text-muted small mb-1">
                                        <i class="fas fa-calendar-week"></i> Day Type
                                    </label>
                                    <div>
                                        <span class="badge bg-@(GetDayTypeColor(Model.DayType)) fs-6 px-3 py-2">
                                            @GetDayTypeIcon(Model.DayType) @GetDayTypeDisplay(Model.DayType)
                                        </span>
                                    </div>
                                </div>
                                <div class="col-md-6 mb-4">
                                    <label class="text-muted small mb-1">
                                        <i class="fas fa-sort-numeric-up"></i> Priority
                                    </label>
                                    <div class="fw-bold">
                                        Level @Model.Priority
                                        <small class="text-muted">(Lower = Higher priority)</small>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Date Range Card -->
                    <div class="card shadow-sm border-0 mb-3">
                        <div class="card-header bg-light">
                            <h5 class="mb-0">
                                <i class="fas fa-calendar-alt"></i> Effective Date Range
                            </h5>
                        </div>
                        <div class="card-body">
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="date-card start-date">
                                        <div class="date-label">
                                            <i class="fas fa-calendar-plus"></i> Start Date
                                        </div>
                                        <div class="date-value">
                                            @Model.StartDate.ToString("MMMM dd, yyyy")
                                        </div>
                                        <div class="date-day">
                                            @Model.StartDate.ToString("dddd")
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="date-card end-date">
                                        <div class="date-label">
                                            <i class="fas fa-calendar-check"></i> End Date
                                        </div>
                                        <div class="date-value">
                                            @Model.EndDate.ToString("MMMM dd, yyyy")
                                        </div>
                                        <div class="date-day">
                                            @Model.EndDate.ToString("dddd")
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <!-- Duration Display -->
                            <div class="alert alert-info mt-3 mb-0">
                                <i class="fas fa-clock"></i>
                                <strong>Duration:</strong> 
                                @((Model.EndDate - Model.StartDate).Days) days
                                (@Model.StartDate.ToString("MMM dd") - @Model.EndDate.ToString("MMM dd, yyyy"))
                            </div>
                        </div>
                    </div>

                    <!-- Status & Timeline -->
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <div class="card shadow-sm border-0 border-start border-@(Model.IsActive ? "success" : "secondary") border-4 h-100">
                                <div class="card-body">
                                    <h6 class="text-@(Model.IsActive ? "success" : "secondary") mb-3">
                                        <i class="fas fa-toggle-@(Model.IsActive ? "on" : "off")"></i> Status
                                    </h6>
                                    <div class="d-flex justify-content-between align-items-center">
                                        <div>
                                            <h4 class="mb-0">@(Model.IsActive ? "Active" : "Inactive")</h4>
                                            <small class="text-muted">
                                                @(Model.IsActive ? "Price is currently in use" : "Price is not active")
                                            </small>
                                        </div>
                                        <i class="fas fa-@(Model.IsActive ? "check-circle" : "times-circle") fa-3x text-@(Model.IsActive ? "success" : "secondary") opacity-25"></i>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6 mb-3">
                            <div class="card shadow-sm border-0 border-start border-primary border-4 h-100">
                                <div class="card-body">
                                    <h6 class="text-primary mb-3">
                                        <i class="fas fa-chart-line"></i> Apply Count
                                    </h6>
                                    <div class="d-flex justify-content-between align-items-center">
                                        <div>
                                            <h4 class="mb-0">0</h4>
                                            <small class="text-muted">Bookings using this price</small>
                                        </div>
                                        <i class="fas fa-calendar-check fa-3x text-primary opacity-25"></i>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Activity Timeline -->
                    <div class="card shadow-sm border-0 mt-3">
                        <div class="card-header bg-light">
                            <h6 class="mb-0">
                                <i class="fas fa-history"></i> Activity Timeline
                            </h6>
                        </div>
                        <div class="card-body">
                            <div class="timeline">
                                <div class="timeline-item">
                                    <div class="timeline-marker bg-primary"></div>
                                    <div class="timeline-content">
                                        <h6 class="mb-1">Price Created</h6>
                                        <p class="text-muted mb-0 small">
                                            <i class="far fa-clock"></i> @Model.CreatedAt.ToString("MMMM dd, yyyy hh:mm tt")
                                        </p>
                                    </div>
                                </div>
                                @if (Model.UpdatedAt.HasValue)
                                {
                                    <div class="timeline-item">
                                        <div class="timeline-marker bg-success"></div>
                                        <div class="timeline-content">
                                            <h6 class="mb-1">Last Updated</h6>
                                            <p class="text-muted mb-0 small">
                                                <i class="far fa-clock"></i> @Model.UpdatedAt.Value.ToString("MMMM dd, yyyy hh:mm tt")
                                            </p>
                                        </div>
                                    </div>
                                }
                                @if (!Model.IsActive)
                                {
                                    <div class="timeline-item">
                                        <div class="timeline-marker bg-warning"></div>
                                        <div class="timeline-content">
                                            <h6 class="mb-1">Price Deactivated</h6>
                                            <p class="text-muted mb-0 small">
                                                <i class="fas fa-info-circle"></i> This price is currently inactive
                                            </p>
                                        </div>
                                    </div>
                                }
                                @if (Model.EndDate < DateTime.UtcNow)
                                {
                                    <div class="timeline-item">
                                        <div class="timeline-marker bg-danger"></div>
                                        <div class="timeline-content">
                                            <h6 class="mb-1">Price Expired</h6>
                                            <p class="text-muted mb-0 small">
                                                <i class="fas fa-exclamation-triangle"></i> This price period has ended
                                            </p>
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Edit Price Modal -->
<div class="modal fade" id="editModal" tabindex="-1" aria-labelledby="editModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-lg">
        <div class="modal-content">
            <form asp-action="EditRoomPrice" asp-route-id="@Model.Id" method="post">
                @Html.AntiForgeryToken()
                <div class="modal-header bg-primary text-white">
                    <h5 class="modal-title" id="editModalLabel">
                        <i class="fas fa-edit"></i> Edit Room Price
                    </h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Price per Night <span class="text-danger">*</span></label>
                            <div class="input-group">
                                <span class="input-group-text">$</span>
                                <input type="number" name="PricePerNight" class="form-control" value="@Model.PricePerNight" step="0.01" min="0.01" required>
                            </div>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Season Type <span class="text-danger">*</span></label>
                            <select name="SeasonName" class="form-select" required>
                                <option value="0" selected="@(Model.SeasonName == SeasonType.HighSeason)">🌟 High Season</option>
                                <option value="1" selected="@(Model.SeasonName == SeasonType.LowSeason)">🍂 Low Season</option>
                                <option value="2" selected="@(Model.SeasonName == SeasonType.PeakSeason)">🔥 Peak Season</option>
                                <option value="3" selected="@(Model.SeasonName == SeasonType.Holiday)">🎉 Holiday</option>
                            </select>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Day Type <span class="text-danger">*</span></label>
                            <select name="DayType" class="form-select" required>
                                <option value="0" selected="@(Model.DayType == DayType.Weekday)">📅 Weekday</option>
                                <option value="1" selected="@(Model.DayType == DayType.Weekend)">🎊 Weekend</option>
                                <option value="2" selected="@(Model.DayType == DayType.Holiday)">🎉 Holiday</option>
                                <option value="3" selected="@(Model.DayType == DayType.All)">⭐ All Days</option>
                            </select>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Start Date <span class="text-danger">*</span></label>
                            <input type="date" name="StartDate" class="form-control" value="@Model.StartDate.ToString("yyyy-MM-dd")" required>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label class="form-label">End Date <span class="text-danger">*</span></label>
                            <input type="date" name="EndDate" class="form-control" value="@Model.EndDate.ToString("yyyy-MM-dd")" required>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label asp-for="DayType" class="form-label d-block mb-2"><i class="bi bi-toggle-on"></i>Active <span class="text-danger">*</span></label>
                            <label class="switch">
                                <input asp-for="IsActive" type="checkbox"/>
                                <span class="slider round"></span>
                            </label>
                            <span id="is-active-error" class="text-danger small"></span>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                        <i class="fas fa-times"></i> Cancel
                    </button>
                    <button type="submit" class="btn btn-primary">
                        <i class="fas fa-save"></i> Save Changes
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<div class="modal fade" id="toggleStatusModal" tabindex="-1" aria-labelledby="toggleStatusModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content border-0 shadow">
            <div class="modal-header bg-secondary text-white border-0">
                <h5 class="modal-title" id="toggleStatusModalLabel">
                    <i class="fas fa-exclamation-triangle me-2"></i> Confirm
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body p-4">
               
                <p class="text-center mb-2">Are you sure you want to @(Model.IsActive? "deactivate" : "active") this amenity?</p>
                <div class="alert alert-warning mb-0">
                    <i class="fas fa-exclamation-circle me-2"></i>
                    <small><strong>Warning:</strong> This action cannot be undone!</small>
                </div>
            </div>
            <div class="modal-footer border-0 bg-light">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                    <i class="fas fa-times"></i> Cancel
                </button>
                <form asp-action="ToggleRoomPriceStatus" asp-route-id="@Model.Id" asp-route-returnTo="detail" method="post" class="d-inline">
                    @Html.AntiForgeryToken()
                    <button type="submit" class="btn btn-primary">
                        @(Model.IsActive? "Deactivate" : "Active")
                    </button>
                </form>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="deleteModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content border-0 shadow">
            <div class="modal-header bg-danger text-white border-0">
                <h5 class="modal-title" id="deleteModalLabel">
                    <i class="fas fa-exclamation-triangle me-2"></i> Confirm Delete
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body p-4">
                <div class="text-center mb-3">
                    <i class="fas fa-dollar-sign fa-4x text-danger mb-3"></i>
                </div>
                <p class="text-center mb-2">Are you sure you want to delete this price?</p>
                <p class="text-center mb-3">
                    <strong class="fs-5">$@Model.PricePerNight - @GetSeasonDisplay(Model.SeasonName)</strong>
                </p>
                <div class="alert alert-warning mb-0">
                    <i class="fas fa-exclamation-circle me-2"></i>
                    <small><strong>Warning:</strong> This action cannot be undone!</small>
                </div>
            </div>
            <div class="modal-footer border-0 bg-light">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                    <i class="fas fa-times"></i> Cancel
                </button>
                <form asp-action="DeleteRoomPrice" asp-route-id="@Model.Id" asp-route-returnTo="detail" method="post" class="d-inline">
                    @Html.AntiForgeryToken()
                    <button type="submit" class="btn btn-danger">
                        <i class="fas fa-trash"></i> Delete Price
                    </button>
                </form>
            </div>
        </div>
    </div>
</div>

@functions {
    string GetSeasonColor(SeasonType season)
    {
        return season switch
        {
            SeasonType.HighSeason => "primary",
            SeasonType.LowSeason => "secondary",
            SeasonType.PeakSeason => "danger",
            SeasonType.Holiday => "warning",
            _ => "info"
        };
    }

    string GetSeasonDisplay(SeasonType season)
    {
        return season switch
        {
            SeasonType.HighSeason => "High Season",
            SeasonType.LowSeason => "Low Season",
            SeasonType.PeakSeason => "Peak Season",
            SeasonType.Holiday => "Holiday",
            _ => "Unknown"
        };
    }

    string GetSeasonIcon(SeasonType season)
    {
        return season switch
        {
            SeasonType.HighSeason => "🌟",
            SeasonType.LowSeason => "🍂",
            SeasonType.PeakSeason => "🔥",
            SeasonType.Holiday => "🎉",
            _ => "❓"
        };
    }

    string GetDayTypeColor(DayType dayType)
    {
        return dayType switch
        {
            DayType.Weekday => "info",
            DayType.Weekend => "success",
            DayType.Holiday => "warning",
            DayType.All => "primary",
            _ => "secondary"
        };
    }

    string GetDayTypeDisplay(DayType dayType)
    {
        return dayType switch
        {
            DayType.Weekday => "Weekday",
            DayType.Weekend => "Weekend",
            DayType.Holiday => "Holiday",
            DayType.All => "All Days",
            _ => "Unknown"
        };
    }

    string GetDayTypeIcon(DayType dayType)
    {
        return dayType switch
        {
            DayType.Weekday => "📅",
            DayType.Weekend => "🎊",
            DayType.Holiday => "🎉",
            DayType.All => "⭐",
            _ => "❓"
        };
    }
}


<style>
    .price-icon-large {
        animation: float 3s ease-in-out infinite;
    }

    @@keyframes float {
        0%, 100% { transform: translateY(0); }
        50% { transform: translateY(-10px); }
    }
    
    .price-highlight {
        padding: 2rem;
        background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
        border-radius: 15px;
        border: 3px solid #28a745;
    }
    
    .date-card {
        padding: 1.5rem;
        background: #f8f9fa;
        border-radius: 10px;
        text-align: center;
        transition: all 0.3s;
    }

    .date-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 5px 15px rgba(0,0,0,0.1);
    }

    .date-card.start-date {
        border-left: 4px solid #0d6efd;
    }

    .date-card.end-date {
        border-left: 4px solid #28a745;
    }

    .date-label {
        font-size: 0.9rem;
        color: #6c757d;
        margin-bottom: 0.5rem;
    }

    .date-value {
        font-size: 1.1rem;
        font-weight: bold;
        color: #212529;
        margin-bottom: 0.25rem;
    }

    .date-day {
        font-size: 0.85rem;
        color: #6c757d;
    }
    
    .timeline {
        position: relative;
        padding-left: 30px;
    }

    .timeline::before {
        content: '';
        position: absolute;
        left: 8px;
        top: 0;
        bottom: 0;
        width: 2px;
        background: #dee2e6;
    }

    .timeline-item {
        position: relative;
        padding-bottom: 20px;
    }

    .timeline-item:last-child {
        padding-bottom: 0;
    }

    .timeline-marker {
        position: absolute;
        left: -26px;
        top: 4px;
        width: 16px;
        height: 16px;
        border-radius: 50%;
        border: 3px solid white;
        box-shadow: 0 0 0 2px currentColor;
    }

    .timeline-content {
        padding-left: 15px;
    }
    
    .info-item {
        transition: all 0.3s;
    }

    .info-item:hover {
        background: #f8f9fa;
        padding: 0.5rem;
        border-radius: 8px;
        margin-left: -0.5rem;
        margin-right: -0.5rem;
    }
    
    .border-4 {
        border-width: 4px !important;
    }
    
    .card {
        animation: fadeIn 0.5s ease-out;
    }

    .switch {
        position: relative;
        display: inline-block;
        width: 46px;
        height: 24px;
    }
    .switch input {
        opacity: 0;
        width: 0;
        height: 0;
    }
    .slider {
        position: absolute;
        cursor: pointer;
        background-color: #ccc;
        border-radius: 24px;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        transition: 0.3s;
    }
    .slider:before {
        position: absolute;
        content: "";
        height: 18px;
        width: 18px;
        left: 3px;
        bottom: 3px;
        background-color: white;
        border-radius: 50%;
        transition: 0.3s;
    }
    input:checked + .slider {
        background-color: #0d6efd;
    }
    input:checked + .slider:before {
        transform: translateX(22px);
    }

    @@keyframes fadeIn {
        from {
            opacity: 0;
            transform: translateY(20px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }
</style>


@section Scripts {
    <script>
        setTimeout(function() {
            const alerts = document.querySelectorAll('.alert');
            alerts.forEach(alert => {
                const bsAlert = new bootstrap.Alert(alert);
                bsAlert.close();
            });
        }, 5000);
    </script>
}