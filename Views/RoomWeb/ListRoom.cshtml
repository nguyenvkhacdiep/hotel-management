@model HotelManagement.Services.Common.PageList<HotelManagement.Services.Dto.RoomResponseModel>
@using HotelManagement.Models.Common

@{
    ViewData["Title"] = "Quản lý phòng";
}

<style>
    .room-card {
        background: white;
        border-radius: 15px;
        overflow: hidden;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
        transition: all 0.3s ease;
        height: 100%;
    }

    .room-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 5px 20px rgba(0, 0, 0, 0.1);
    }

    .room-image {
        width: 100%;
        height: 200px;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-size: 48px;
        position: relative;
    }

    .room-status-badge {
        position: absolute;
        top: 15px;
        right: 15px;
        padding: 6px 15px;
        border-radius: 20px;
        font-size: 12px;
        font-weight: 600;
        backdrop-filter: blur(10px);
    }

    .status-available {
        background: rgba(56, 239, 125, 0.9);
        color: white;
    }

    .status-occupied {
        background: rgba(245, 87, 108, 0.9);
        color: white;
    }

    .status-maintenance {
        background: rgba(255, 193, 7, 0.9);
        color: white;
    }

    .status-reserved {
        background: rgba(102, 126, 234, 0.9);
        color: white;
    }

    .room-body {
        padding: 20px;
    }

    .room-header {
        display: flex;
        justify-content: space-between;
        align-items: start;
        margin-bottom: 15px;
    }

    .room-number {
        font-size: 24px;
        font-weight: 700;
        color: #333;
    }

    .room-type {
        display: inline-block;
        background: #f0f0f0;
        padding: 5px 12px;
        border-radius: 20px;
        font-size: 12px;
        font-weight: 600;
        color: #666;
    }

    .room-info {
        display: flex;
        gap: 15px;
        margin-bottom: 15px;
        flex-wrap: wrap;
    }

    .info-item {
        display: flex;
        align-items: center;
        gap: 8px;
        font-size: 14px;
        color: #666;
    }

    .info-item i {
        color: #667eea;
    }

    .room-price {
        font-size: 20px;
        font-weight: 700;
        color: #667eea;
        margin-bottom: 15px;
    }

    .room-price small {
        font-size: 14px;
        color: #999;
        font-weight: normal;
    }

    .amenities-list {
        display: flex;
        flex-wrap: wrap;
        gap: 8px;
        margin-bottom: 15px;
    }

    .amenity-tag {
        background: #f8f9fa;
        padding: 4px 10px;
        border-radius: 15px;
        font-size: 11px;
        color: #666;
    }

    .room-actions {
        display: flex;
        gap: 10px;
    }

    .btn-room {
        flex: 1;
        padding: 10px;
        border-radius: 8px;
        border: none;
        font-weight: 600;
        font-size: 14px;
        cursor: pointer;
        transition: all 0.3s ease;
    }

    .btn-view {
        background: #667eea;
        color: white;
    }

    .btn-view:hover {
        background: #5568d3;
    }

    .btn-edit {
        background: #38ef7d;
        color: white;
    }

    .btn-edit:hover {
        background: #2dd46d;
    }

    .btn-delete {
        background: #f5576c;
        color: white;
    }

    .btn-delete:hover {
        background: #e04556;
    }

    .filter-card {
        background: white;
        border-radius: 15px;
        padding: 25px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
        margin-bottom: 30px;
    }

    .filter-row {
        display: flex;
        gap: 15px;
        align-items: end;
        flex-wrap: wrap;
    }

    .filter-group {
        flex: 1;
        min-width: 200px;
    }

    .filter-group label {
        display: block;
        font-weight: 600;
        margin-bottom: 8px;
        color: #333;
        font-size: 14px;
    }

    .filter-group select,
    .filter-group input {
        width: 100%;
        padding: 10px 15px;
        border: 2px solid #e0e0e0;
        border-radius: 8px;
        font-size: 14px;
        transition: all 0.3s ease;
    }

    .filter-group select:focus,
    .filter-group input:focus {
        outline: none;
        border-color: #667eea;
    }

    .stats-bar {
        display: flex;
        gap: 20px;
        margin-bottom: 30px;
        flex-wrap: wrap;
    }

    .stat-item {
        background: white;
        padding: 20px;
        border-radius: 12px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
        flex: 1;
        min-width: 200px;
        display: flex;
        align-items: center;
        gap: 15px;
    }

    .stat-icon {
        width: 50px;
        height: 50px;
        border-radius: 10px;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 24px;
        color: white;
    }

    .stat-icon.available {
        background: linear-gradient(135deg, #11998e, #38ef7d);
    }

    .stat-icon.occupied {
        background: linear-gradient(135deg, #f093fb, #f5576c);
    }

    .stat-icon.maintenance {
        background: linear-gradient(135deg, #ffeaa7, #fdcb6e);
    }

    .stat-icon.total {
        background: linear-gradient(135deg, #667eea, #764ba2);
    }

    .stat-content h3 {
        font-size: 28px;
        font-weight: 700;
        margin: 0;
        color: #333;
    }

    .stat-content p {
        margin: 0;
        color: #999;
        font-size: 14px;
    }

    .view-toggle {
        display: flex;
        gap: 10px;
        background: white;
        padding: 5px;
        border-radius: 10px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
    }

    .view-btn {
        padding: 8px 20px;
        border: none;
        background: transparent;
        border-radius: 8px;
        cursor: pointer;
        color: #666;
        font-weight: 600;
        transition: all 0.3s ease;
    }

    .view-btn.active {
        background: #667eea;
        color: white;
    }

    .empty-state {
        text-align: center;
        padding: 60px 20px;
        background: white;
        border-radius: 15px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
    }

    .empty-state i {
        font-size: 64px;
        color: #ddd;
        margin-bottom: 20px;
    }

    .empty-state h3 {
        color: #666;
        margin-bottom: 10px;
    }

    .empty-state p {
        color: #999;
    }
</style>

<!-- Page Header -->
<div class="page-header mb-4">
    <div class="d-flex justify-content-between align-items-center">
        <div>
            <h1 class="page-title">Room Management</h1>
        </div>
        <div>
            <a href="@Url.Action("Create", "RoomWeb")" class="btn btn-primary">
                <i class="fas fa-plus me-2"></i>Add New Room
            </a>
        </div>
    </div>
</div>

<!-- Statistics Bar -->
<div class="stats-bar">
    <div class="stat-item">
        <div class="stat-icon total"><i class="fas fa-door-open"></i></div>
        <div class="stat-content">
            <h3>@Model.Data.Count()</h3>
            <p>Total Rooms</p>
        </div>
    </div>
    <div class="stat-item">
        <div class="stat-icon available"><i class="fas fa-check-circle"></i></div>
        <div class="stat-content">
            <h3>@Model.Data.Count(r => r.Status == RoomStatus.Available)</h3>
            <p>Available</p>
        </div>
    </div>
    <div class="stat-item">
        <div class="stat-icon occupied"><i class="fas fa-user"></i></div>
        <div class="stat-content">
            <h3>@Model.Data.Count(r => r.Status == RoomStatus.Occupied)</h3>
            <p>Occupied</p>
        </div>
    </div>
    <div class="stat-item">
        <div class="stat-icon maintenance"><i class="fas fa-tools"></i></div>
        <div class="stat-content">
            <h3>@Model.Data.Count(r => r.Status == RoomStatus.Maintenance)</h3>
            <p>Under Maintenance</p>
        </div>
    </div>
</div>

<!-- Filter Card -->
<div class="filter-card">
    <div class="filter-row">
        <div class="filter-group">
            <label><i class="fas fa-search me-2"></i>Search</label>
            <input type="text" id="searchInput" placeholder="Room number, name..." />
        </div>
        <div class="filter-group">
            <label><i class="fas fa-layer-group me-2"></i>Room Type</label>
            <select id="roomTypeFilter">
                <option value="">All types</option>
                @foreach (var type in Model.Data.Select(r => r.RoomTypeName).Distinct())               
                {
                    <option value="@type">@type</option>
                }
            </select>
        </div>
        <div class="filter-group">
            <label><i class="fas fa-info-circle me-2"></i>Status</label>
            <select id="statusFilter">
                <option value="">All statuses</option>
                <option value="Available">Available</option>
                <option value="Occupied">Occupied</option>
                <option value="Reserved">Reserved</option>
                <option value="Maintenance">Under Maintenance</option>
            </select>
        </div>
        <div class="filter-group">
            <label><i class="fas fa-building me-2"></i>Floor</label>
            <select id="floorFilter">
                <option value="">All floors</option>
                @foreach (var floor in Model.Data.Select(r => r.FloorNumber).Distinct().OrderBy(f => f))
                {
                    <option value="@floor">Floor @floor</option>
                }
            </select>
        </div>
        <div class="filter-group mb-1">
            <button class="btn btn-secondary w-100" onclick="resetFilters()">
                <i class="fas fa-redo me-2"></i>Reset
            </button>
        </div>
    </div>
</div>

<!-- Room Grid -->
<div class="row" id="roomGrid">
    @if (Model.Data.Any())
    {
        foreach (var room in Model.Data)
        {
            var statusClass = room.Status.ToString().ToLower();
            var statusText = room.Status switch
            {
                RoomStatus.Available => "Available",
                RoomStatus.Occupied => "Occupied",
                RoomStatus.Reserved => "Reserved",
                RoomStatus.Maintenance => "Under Maintenance",
                _ => room.Status.ToString()
            };

            <div class="col-lg-4 col-md-6 mb-4 room-item" 
                 data-room-number="@room.RoomNumber" 
                 data-room-type="@room.RoomTypeName"
                 data-status="@room.Status"
                 data-floor="@room.FloorNumber">
                <div class="room-card">
                    <div class="room-image">
                        <i class="fas fa-bed"></i>
                        <span class="room-status-badge status-@statusClass">
                            @statusText
                        </span>
                    </div>
                    <div class="room-body">
                        <div class="room-header">
                            <div>
                                <div class="room-number">Phòng @room.RoomNumber</div>
                                @if (!string.IsNullOrEmpty(room.RoomName))
                                {
                                    <small class="text-muted">@room.RoomName</small>
                                }
                            </div>
                            <span class="room-type">@room.RoomTypeName</span>
                        </div>

                        <div class="room-info">
                            <div class="info-item">
                                <i class="fas fa-building"></i>
                                <span>Floor @room.FloorNumber</span>
                            </div>
                            <div class="info-item">
                                <i class="fas fa-users"></i>
                                <span>@room.Capacity people</span>
                            </div>
                        </div>

                        <div class="room-price">
                            @room.BasePrice.ToString("N0") VNĐ
                            <small>/night</small>
                        </div>

                        @if (room.Amenities.Any())
                        {
                            <div class="amenities-list">
                                @foreach (var amenity in room.Amenities.Take(4))
                                {
                                    <span class="amenity-tag">
                                        <i class="fas fa-check me-1"></i>@amenity
                                    </span>
                                }
                                @if (room.Amenities.Count > 4)
                                {
                                    <span class="amenity-tag">+@(room.Amenities.Count - 4) Other</span>
                                }
                            </div>
                        }

                        <div class="room-actions">
                            <button class="btn-room btn-view" onclick="viewRoom('@room.Id')">
                                <i class="fas fa-eye me-1"></i>Details
                            </button>
                            <button class="btn-room btn-delete" onclick="deleteRoom('@room.Id', '@room.RoomNumber')">
                                <i class="fas fa-trash me-1"></i>Delete
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        }
    }
    else
    {
        <div class="col-12">
            <div class="empty-state">
                <i class="fas fa-bed"></i>
                <h3>No rooms yet</h3>
                <p>Click "Add New Room" to get started</p>
                <a href="@Url.Action("CreateRoom", "RoomWeb")" class="btn btn-primary mt-3">
                    <i class="fas fa-plus me-2"></i>Add your first room
                </a>
            </div>
        </div>
    }
</div>

<div id="noResults" class="empty-state" style="display: none;">
    <i class="fas fa-search"></i>
    <h3>No rooms found</h3>
    <p>Try changing the filters or search term</p>
</div>

@section Scripts {
    <script>
        // Filter functionality
        const searchInput = document.getElementById('searchInput');
        const roomTypeFilter = document.getElementById('roomTypeFilter');
        const statusFilter = document.getElementById('statusFilter');
        const floorFilter = document.getElementById('floorFilter');
        const roomItems = document.querySelectorAll('.room-item');
        const noResults = document.getElementById('noResults');
        const roomGrid = document.getElementById('roomGrid');

        function filterRooms() {
            const searchTerm = searchInput.value.toLowerCase();
            const selectedType = roomTypeFilter.value;
            const selectedStatus = statusFilter.value;
            const selectedFloor = floorFilter.value;

            let visibleCount = 0;

            roomItems.forEach(item => {
                const roomNumber = item.dataset.roomNumber.toLowerCase();
                const roomType = item.dataset.roomType;
                const status = item.dataset.status;
                const floor = item.dataset.floor;

                const matchesSearch = roomNumber.includes(searchTerm);
                const matchesType = !selectedType || roomType === selectedType;
                const matchesStatus = !selectedStatus || status === selectedStatus;
                const matchesFloor = !selectedFloor || floor === selectedFloor;

                if (matchesSearch && matchesType && matchesStatus && matchesFloor) {
                    item.style.display = 'block';
                    visibleCount++;
                } else {
                    item.style.display = 'none';
                }
            });
            
            if (visibleCount === 0) {
                roomGrid.style.display = 'none';
                noResults.style.display = 'block';
            } else {
                roomGrid.style.display = 'flex';
                noResults.style.display = 'none';
            }
        }

        searchInput.addEventListener('input', filterRooms);
        roomTypeFilter.addEventListener('change', filterRooms);
        statusFilter.addEventListener('change', filterRooms);
        floorFilter.addEventListener('change', filterRooms);

        function resetFilters() {
            searchInput.value = '';
            roomTypeFilter.value = '';
            statusFilter.value = '';
            floorFilter.value = '';
            filterRooms();
        }

        function viewRoom(id) {
            window.location.href = '/room/room-detail/' + id;
        }

        function deleteRoom(id, roomNumber) {
            if (confirm(`Are you sure you want to delete room ${roomNumber}?`)) {
                fetch('@Url.Action("Delete", "RoomWeb")/' + id, {
                    method: 'DELETE',
                    headers: { 'Content-Type': 'application/json' }
                })
                    .then(response => {
                        if (response.ok) {
                            alert('Room deleted successfully!');
                            location.reload();
                        } else {
                            alert('An error occurred while deleting the room.');
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        alert('An error occurred while deleting the room.');
                    });
            }
        }
    </script>
}