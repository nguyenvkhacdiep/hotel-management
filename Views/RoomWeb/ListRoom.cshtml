@model HotelManagement.Services.Common.PageList<HotelManagement.Services.Dto.RoomResponseModel>
@using HotelManagement.Models.Common

@{
    ViewData["Title"] = "Room management";
}

@{
    var queryParams = ViewBag.QueryParams as QueryParameters ?? QueryParameters.FromRequest(Context.Request);
    var filters = ViewBag.Filters as List<FilterConfig>;
}

<style>
    .room-card {
        background: white;
        border-radius: 15px;
        overflow: hidden;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
        transition: all 0.3s ease;
        height: 100%;
    }

    .room-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 5px 20px rgba(0, 0, 0, 0.1);
    }

    .room-image {
        width: 100%;
        height: 200px;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-size: 48px;
        position: relative;
    }

    .room-status-badge {
        position: absolute;
        top: 15px;
        right: 15px;
        padding: 6px 15px;
        border-radius: 20px;
        font-size: 12px;
        font-weight: 600;
        backdrop-filter: blur(10px);
    }

    
    .room-body {
        padding: 20px;
    }

    .room-header {
        display: flex;
        justify-content: space-between;
        align-items: start;
        margin-bottom: 15px;
    }

    .room-number {
        font-size: 24px;
        font-weight: 700;
        color: #333;
    }

    .room-type {
        display: inline-block;
        background: #f0f0f0;
        padding: 5px 12px;
        border-radius: 20px;
        font-size: 12px;
        font-weight: 600;
        color: #666;
    }

    .room-info {
        display: flex;
        gap: 15px;
        margin-bottom: 15px;
        flex-wrap: wrap;
    }

    .info-item {
        display: flex;
        align-items: center;
        gap: 8px;
        font-size: 14px;
        color: #666;
    }

    .info-item i {
        color: #667eea;
    }

    .room-price {
        font-size: 20px;
        font-weight: 700;
        color: #667eea;
        margin-bottom: 15px;
    }

    .room-price small {
        font-size: 14px;
        color: #999;
        font-weight: normal;
    }

    .amenities-list {
        display: flex;
        flex-wrap: wrap;
        gap: 8px;
        margin-bottom: 15px;
    }

    .amenity-tag {
        background: #f8f9fa;
        padding: 4px 10px;
        border-radius: 15px;
        font-size: 11px;
        color: #666;
    }

    .room-actions {
        display: flex;
        gap: 10px;
    }

    .btn-room {
        flex: 1;
        padding: 10px;
        border-radius: 8px;
        border: none;
        font-weight: 600;
        font-size: 14px;
        cursor: pointer;
        transition: all 0.3s ease;
    }

    .btn-view {
        background: #667eea;
        color: white;
    }

    .btn-view:hover {
        background: #5568d3;
    }

    .btn-delete {
        background: #f5576c;
        color: white;
    }

    .btn-delete:hover {
        background: #e04556;
    }

    .filter-card {
        background: white;
        border-radius: 15px;
        padding: 25px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
        margin-bottom: 30px;
    }

    .filter-group label {
        display: block;
        font-weight: 600;
        margin-bottom: 8px;
        color: #333;
        font-size: 14px;
    }

    .filter-group select,
    .filter-group input {
        width: 100%;
        padding: 10px 15px;
        border: 2px solid #e0e0e0;
        border-radius: 8px;
        font-size: 14px;
        transition: all 0.3s ease;
    }

    .filter-group select:focus,
    .filter-group input:focus {
        outline: none;
        border-color: #667eea;
    }

    .stats-bar {
        display: flex;
        gap: 20px;
        margin-bottom: 30px;
        flex-wrap: wrap;
    }

    .stat-item {
        background: white;
        padding: 20px;
        border-radius: 12px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
        flex: 1;
        min-width: 200px;
        display: flex;
        align-items: center;
        gap: 15px;
    }

    .stat-icon {
        width: 50px;
        height: 50px;
        border-radius: 10px;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 24px;
        color: white;
    }

    .stat-icon.available {
        background: linear-gradient(135deg, #11998e, #38ef7d);
    }

    .stat-icon.occupied {
        background: linear-gradient(135deg, #f093fb, #f5576c);
    }

    .stat-icon.maintenance {
        background: linear-gradient(135deg, #ffeaa7, #fdcb6e);
    }

    .stat-icon.total {
        background: linear-gradient(135deg, #667eea, #764ba2);
    }

    .stat-content h3 {
        font-size: 28px;
        font-weight: 700;
        margin: 0;
        color: #333;
    }

    .stat-content p {
        margin: 0;
        color: #999;
        font-size: 14px;
    }

    .empty-state {
        text-align: center;
        padding: 60px 20px;
        background: white;
        border-radius: 15px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
    }

    .empty-state i {
        font-size: 64px;
        color: #ddd;
        margin-bottom: 20px;
    }

    .empty-state h3 {
        color: #666;
        margin-bottom: 10px;
    }

    .empty-state p {
        color: #999;
    }
</style>

<div class="page-header mb-4">
    <div class="d-flex justify-content-between align-items-center">
        <div>
            <h1 class="page-title">Room Management</h1>
        </div>
        <div>
            <a href="@Url.Action("CreateRoom", "RoomWeb")" class="btn btn-primary">
                <i class="fas fa-plus me-2"></i>Add New Room
            </a>
        </div>
    </div>
</div>

@if (TempData["SuccessMessage"] != null)
{
    <div class="alert alert-success alert-dismissible fade show" role="alert">
        <i class="bi bi-check-circle-fill"></i> @TempData["SuccessMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    </div>
}

@if (TempData["ErrorMessage"] != null)
{
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        <i class="bi bi-exclamation-triangle-fill"></i> @TempData["ErrorMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    </div>
}

<div class="filter-card">
    <div class="card-body">
        @await Html.PartialAsync("_DynamicFilterPartial", (queryParams, filters))
    </div>
</div>

<div class="row" id="roomGrid">
    @if (Model.Data.Any())
    {
        foreach (var room in Model.Data)
        {
            var statusClass = room.Status.ToString().ToLower();
            var statusText = room.Status switch
            {
                RoomStatus.Available => "Available",
                RoomStatus.Occupied => "Occupied",
                RoomStatus.Reserved => "Reserved",
                RoomStatus.Maintenance => "Under Maintenance",
                _ => room.Status.ToString()
            };

            <div class="col-lg-4 col-md-6 mb-4 room-item" 
                 data-room-number="@room.RoomNumber" 
                 data-room-type="@room.RoomTypeName"
                 data-status="@room.Status"
                 data-floor="@room.FloorNumber">
                <div class="room-card">
                    <div class="room-image">
                        <i class="fas fa-bed"></i>
                        <span class="room-status-badge status-@statusClass">
                            @statusText
                        </span>
                    </div>
                    <div class="room-body">
                        <div class="room-header">
                            <div>
                                <div class="room-number">Phòng @room.RoomNumber</div>
                                @if (!string.IsNullOrEmpty(room.RoomName))
                                {
                                    <small class="text-muted">@room.RoomName</small>
                                }
                            </div>
                            <span class="room-type">@room.RoomTypeName</span>
                        </div>

                        <div class="room-info">
                            <div class="info-item">
                                <i class="fas fa-building"></i>
                                <span>Floor @room.FloorNumber</span>
                            </div>
                            <div class="info-item">
                                <i class="fas fa-users"></i>
                                <span>@room.Capacity people</span>
                            </div>
                        </div>

                        <div class="room-price">
                            @room.BasePrice.ToString("N0") VNĐ
                            <small>/night</small>
                        </div>

                        @if (room.Amenities.Any())
                        {
                            <div class="amenities-list">
                                @foreach (var amenity in room.Amenities.Take(4))
                                {
                                    <span class="amenity-tag">
                                        <i class="fas fa-check me-1"></i>@amenity
                                    </span>
                                }
                                @if (room.Amenities.Count > 4)
                                {
                                    <span class="amenity-tag">+@(room.Amenities.Count - 4) Other</span>
                                }
                            </div>
                        }

                        <div class="room-actions">
                            <button class="btn-room btn-view" onclick="viewRoom('@room.Id')">
                                <i class="fas fa-eye me-1"></i>Details
                            </button>
                            <button type="button"
                                    class="btn-room btn-delete"
                                    data-floor-id="@room.Id"
                                    onclick="confirmDelete(this)">
                                <i class="fas fa-trash me-1"></i>Delete

                            </button>
                        </div>
                    </div>
                </div>
            </div>
        }
    }
    else
    {
        <div class="col-12">
            <div class="empty-state">
                <i class="fas fa-bed"></i>
                <h3>No rooms yet</h3>
            </div>
        </div>
    }
</div>

<div id="noResults" class="empty-state" style="display: none;">
    <i class="fas fa-search"></i>
    <h3>No rooms found</h3>
    <p>Try changing the filters or search term</p>
</div>


<div class="modal fade" id="deleteModal" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content border-0 shadow">
            <div class="modal-header bg-danger text-white border-0">
                <h5 class="modal-title">
                    <i class="fas fa-exclamation-triangle me-2"></i> Confirm Delete
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body p-4">
                <div class="text-center mb-3">
                    <i class="fas fa-building fa-4x text-danger mb-3"></i>
                </div>
                <p class="text-center mb-2">Are you sure you want to delete this record?</p>
                <div class="alert alert-warning mb-0">
                    <i class="fas fa-exclamation-circle me-2"></i>
                    <small><strong>Warning:</strong> This action cannot be undone!</small>
                </div>
            </div>
            <div class="modal-footer border-0 bg-light">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                    <i class="fas fa-times"></i> Cancel
                </button>
                <form id="deleteForm" method="post" class="d-inline">
                    @Html.AntiForgeryToken()
                    <button type="submit" class="btn btn-danger">
                        <i class="fas fa-trash"></i> Delete Floor
                    </button>
                </form>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        function viewRoom(id) {
            window.location.href = '/room/room-detail/' + id;
        }

        function confirmDelete(button) {
            const floorId = button.getAttribute('data-floor-id');

            document.getElementById('deleteForm').action = 'delete-room/' + floorId;

            var modal = new bootstrap.Modal(document.getElementById('deleteModal'));
            modal.show();
        }

        setTimeout(function() {
            const alerts = document.querySelectorAll('.alert');
            alerts.forEach(alert => {
                const bsAlert = new bootstrap.Alert(alert);
                bsAlert.close();
            });
        }, 5000);
        
    </script>
}