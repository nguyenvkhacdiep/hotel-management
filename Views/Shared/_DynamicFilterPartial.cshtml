@using HotelManagement.Models.Common
@model (HotelManagement.Models.Common.QueryParameters QueryParams, List<HotelManagement.Models.Common.FilterConfig> Filters)

<div class="card mb-4">
    <div class="card-body">
        <form method="get" id="filterForm">
            <div class="filters-grid">
                <div class="filter-item">
                    <label class="form-label">
                        <i class="bi bi-search"></i> Search
                    </label>
                    <input type="text" name="SearchKey" class="form-control"
                           placeholder="@ViewData["SearchPlaceholder"]"
                           value="@Model.QueryParams.SearchKey" />
                </div>
                
                @foreach (var filter in Model.Filters)
                {
                    <div class="filter-item">
                        <label class="form-label">
                            <i class="bi bi-funnel"></i> @filter.Label
                        </label>

                        @switch (filter.Type)
                        {
                            case FilterType.Select:
                                <select name="@filter.Name" class="form-select">
                                    <option value="">All @filter.Label</option>
                                    @if (filter.Options != null)
                                    {
                                        @foreach (var option in filter.Options)
                                        {
                                            var isSelected = Model.QueryParams.GetFilter(filter.Name) == option.Key;
                                            <option value="@option.Key" selected="@isSelected">
                                                @option.Value
                                            </option>
                                        }
                                    }
                                </select>
                                break;

                            case FilterType.Text:
                                <input type="text" name="@filter.Name" class="form-control"
                                       placeholder="@filter.Placeholder"
                                       value="@Model.QueryParams.GetFilter(filter.Name)" />
                                break;

                            case FilterType.Date:
                                <input type="date" name="@filter.Name" class="form-control"
                                       value="@Model.QueryParams.GetFilter(filter.Name)" />
                                break;

                            case FilterType.Number:
                                <input type="number" name="@filter.Name" class="form-control"
                                       placeholder="@filter.Placeholder"
                                       value="@Model.QueryParams.GetFilter(filter.Name)" />
                                break;
                        }
                    </div>
                }
                
                <div class="filter-actions">
                    <label class="form-label d-block">&nbsp;</label>
                    <button type="button" class="btn btn-primary w-100 mb-1" onclick="submitFilterForm()">
                        <i class="bi bi-search"></i> Filter
                    </button>
                    <a href="@Url.Action(ViewContext.RouteData.Values["action"]?.ToString())"
                       class="btn btn-outline-secondary w-100">
                        <i class="bi bi-x-circle"></i> Clear
                    </a>
                </div>
            </div>
        </form>
    </div>
</div>

<script>
    function submitFilterForm() {
        const form = document.getElementById('filterForm');
        const formData = new FormData(form);
        
        const params = new URLSearchParams();

        for (let [key, value] of formData.entries()) {
            const trimmedValue = typeof value === 'string' ? value.trim() : value;
            
            if (trimmedValue !== '' && trimmedValue !== null && trimmedValue !== undefined) {
                params.append(key, trimmedValue);
            }
        }
        
        const actionUrl = form.getAttribute('action') || window.location.pathname;
        const queryString = params.toString();
        
        if (queryString) {
            window.location.href = actionUrl + '?' + queryString;
        } else {
            window.location.href = actionUrl;
        }
    }
    
    document.addEventListener('DOMContentLoaded', function() {
        const form = document.getElementById('filterForm');
        const inputs = form.querySelectorAll('input[type="text"], input[type="number"]');

        inputs.forEach(input => {
            input.addEventListener('keypress', function(e) {
                if (e.key === 'Enter') {
                    e.preventDefault();
                    submitFilterForm();
                }
            });
        });
    });
    
    function enableAutoSubmit() {
        const form = document.getElementById('filterForm');
        const selects = form.querySelectorAll('select, input[type="date"]');

        selects.forEach(element => {
            element.addEventListener('change', function() {
                submitFilterForm();
            });
        });
    }

  
</script>

<style>
    .filters-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        gap: 1rem;
        margin-bottom: 1rem;
    }
    
    @@media (max-width: 768px) {
        .filters-grid {
            grid-template-columns: 1fr;
            gap: 0.75rem;
        }
        
        .filter-item {
            min-width: 0;
        }
    }

    @@media (min-width: 769px) and (max-width: 1200px) {
        .filters-grid {
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        }
    }

    @@media (min-width: 1201px) {
        .filters-grid {
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        }
    }

    .filter-item {
        min-width: 200px;
    }

    .filter-actions {
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
        grid-column: span 1;
    }

    @@media (max-width: 768px) {
        .filter-actions {
            grid-column: 1 / -1;
        }
    }

    .filter-active {
        border-color: #0d6efd !important;
        box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.25);
    }
    
    .btn-loading {
        position: relative;
        pointer-events: none;
        opacity: 0.7;
    }

    .btn-loading::after {
        content: "";
        position: absolute;
        width: 16px;
        height: 16px;
        top: 50%;
        left: 50%;
        margin-left: -8px;
        margin-top: -8px;
        border: 2px solid #ffffff;
        border-radius: 50%;
        border-top-color: transparent;
        animation: spinner 0.6s linear infinite;
    }

    @@keyframes spinner {
        to { transform: rotate(360deg); }
    }
    
    .form-label {
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
        max-width: 100%;
    }
</style>