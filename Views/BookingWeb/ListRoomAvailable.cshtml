@model List<HotelManagement.Services.Dto.RoomResponseModel>
@using HotelManagement.Models.Common

@{
    ViewData["Title"] = "Room available";
}

@{
    var queryParams = ViewBag.QueryParams as QueryParameters ?? QueryParameters.FromRequest(Context.Request);
    var filters = ViewBag.Filters as List<FilterConfig>;
}

<style>
    .room-card {
        background: white;
        border-radius: 15px;
        overflow: hidden;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
        transition: all 0.3s ease;
        height: 100%;
        position: relative;
    }

    .room-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 5px 20px rgba(0, 0, 0, 0.1);
    }

    .room-card.selected {
        border: 3px solid #667eea;
        box-shadow: 0 5px 20px rgba(102, 126, 234, 0.3);
    }

    .room-checkbox {
        position: absolute;
        top: 15px;
        left: 15px;
        z-index: 10;
        width: 24px;
        height: 24px;
        cursor: pointer;
    }

    .room-checkbox input[type="checkbox"] {
        width: 24px;
        height: 24px;
        cursor: pointer;
        accent-color: #667eea;
    }

    .room-image {
        width: 100%;
        height: 200px;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-size: 48px;
        position: relative;
    }

    .room-status-badge {
        position: absolute;
        top: 15px;
        right: 15px;
        padding: 6px 15px;
        border-radius: 20px;
        font-size: 12px;
        font-weight: 600;
        backdrop-filter: blur(10px);
    }

    .room-body {
        padding: 20px;
    }

    .room-header {
        display: flex;
        justify-content: space-between;
        align-items: start;
        margin-bottom: 15px;
    }

    .room-number {
        font-size: 24px;
        font-weight: 700;
        color: #333;
    }

    .room-type {
        display: inline-block;
        background: #f0f0f0;
        padding: 5px 12px;
        border-radius: 20px;
        font-size: 12px;
        font-weight: 600;
        color: #666;
    }

    .room-info {
        display: flex;
        gap: 15px;
        margin-bottom: 15px;
        flex-wrap: wrap;
    }

    .info-item {
        display: flex;
        align-items: center;
        gap: 8px;
        font-size: 14px;
        color: #666;
    }

    .info-item i {
        color: #667eea;
    }

    .room-price {
        font-size: 20px;
        font-weight: 700;
        color: #667eea;
        margin-bottom: 15px;
    }

    .room-price small {
        font-size: 14px;
        color: #999;
        font-weight: normal;
    }

    .amenities-list {
        display: flex;
        flex-wrap: wrap;
        gap: 8px;
        margin-bottom: 15px;
    }

    .amenity-tag {
        background: #f8f9fa;
        padding: 4px 10px;
        border-radius: 15px;
        font-size: 11px;
        color: #666;
    }

    .room-actions {
        display: flex;
        gap: 10px;
    }

    .btn-room {
        flex: 1;
        padding: 10px;
        border-radius: 8px;
        border: none;
        font-weight: 600;
        font-size: 14px;
        cursor: pointer;
        transition: all 0.3s ease;
    }

    .btn-view {
        background: #667eea;
        color: white;
    }

    .btn-view:hover {
        background: #5568d3;
    }

    .filter-card {
        background: white;
        border-radius: 15px;
        padding: 25px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
        margin-bottom: 30px;
    }

    .empty-state {
        text-align: center;
        padding: 60px 20px;
        background: white;
        border-radius: 15px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
    }

    .empty-state i {
        font-size: 64px;
        color: #ddd;
        margin-bottom: 20px;
    }

    .empty-state h3 {
        color: #666;
        margin-bottom: 10px;
    }

    .empty-state p {
        color: #999;
    }

    /* Selection Panel */
    #bookSelectedBtn:disabled {
        opacity: 0.6;
        cursor: not-allowed;
    }

    #bookSelectedBtn:not(:disabled) {
        animation: pulse 2s infinite;
    }

    @@keyframes pulse {
        0%, 100% {
            box-shadow: 0 0 0 0 rgba(102, 126, 234, 0.7);
        }
        50% {
            box-shadow: 0 0 0 10px rgba(102, 126, 234, 0);
        }
    }

    .select-all-checkbox {
        display: flex;
        align-items: center;
        gap: 10px;
        margin-bottom: 20px;
        padding: 15px;
        background: #f8f9fa;
        border-radius: 10px;
    }

    .select-all-checkbox input[type="checkbox"] {
        width: 20px;
        height: 20px;
        cursor: pointer;
        accent-color: #667eea;
    }

    .select-all-checkbox label {
        margin: 0;
        font-weight: 600;
        cursor: pointer;
    }
</style>

<div class="page-header mb-4">
    <div class="d-flex justify-content-between align-items-center">
        <div>
            <h1 class="page-title">Room Available</h1>
        </div>
        <div>
            <button type="button" class="btn btn-primary" id="bookSelectedBtn" onclick="processSelectedRooms()" disabled>
                <i class="fas fa-calendar-check me-1"></i> 
                Book Selected Rooms (<span id="selectedCountText">0</span>)
            </button>
        </div>
    </div>
</div>

@if (TempData["SuccessMessage"] != null)
{
    <div class="alert alert-success alert-dismissible fade show" role="alert">
        <i class="bi bi-check-circle-fill"></i> @TempData["SuccessMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    </div>
}

@if (TempData["ErrorMessage"] != null)
{
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        <i class="bi bi-exclamation-triangle-fill"></i> @TempData["ErrorMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    </div>
}

<div class="filter-card">
    <div class="card-body">
        @await Html.PartialAsync("_DynamicFilterPartial", (queryParams, filters, false))
    </div>
</div>

<div class="row" id="roomGrid">
    @if (Model.Any())
    {
        foreach (var room in Model)
        {
            var statusClass = room.Status.ToString().ToLower();
            var statusText = room.Status switch
            {
                RoomStatus.Available => "Available",
                RoomStatus.Occupied => "Occupied",
                RoomStatus.Reserved => "Reserved",
                RoomStatus.Maintenance => "Under Maintenance",
                _ => room.Status.ToString()
            };

            <div class="col-lg-4 col-md-6 mb-4 room-item" 
                 data-room-id="@room.Id"
                 data-room-number="@room.RoomNumber" 
                 data-room-type="@room.RoomTypeName"
                 data-status="@room.Status"
                 data-floor="@room.FloorNumber">
                <div class="room-card">
                    <div class="room-checkbox">
                        <input type="checkbox" 
                               class="room-select-checkbox" 
                               value="@room.Id" 
                               data-room-number="@room.RoomNumber"
                               data-room-price="@room.BasePrice">
                    </div>

                    <div class="room-image">
                        <i class="fas fa-bed"></i>
                        <span class="room-status-badge status-@statusClass">
                            @statusText
                        </span>
                    </div>
                    <div class="room-body">
                        <div class="room-header">
                            <div>
                                <div class="room-number">Phòng @room.RoomNumber</div>
                                @if (!string.IsNullOrEmpty(room.RoomName))
                                {
                                    <small class="text-muted">@room.RoomName</small>
                                }
                            </div>
                            <span class="room-type">@room.RoomTypeName</span>
                        </div>

                        <div class="room-info">
                            <div class="info-item">
                                <i class="fas fa-building"></i>
                                <span>Floor @room.FloorNumber</span>
                            </div>
                            <div class="info-item">
                                <i class="fas fa-users"></i>
                                <span>@room.Capacity people</span>
                            </div>
                        </div>

                        <div class="room-price">
                            @room.BasePrice.ToString("N0") VNĐ
                            <small>/night</small>
                        </div>

                        @if (room.Amenities.Any())
                        {
                            <div class="amenities-list">
                                @foreach (var amenity in room.Amenities.Take(4))
                                {
                                    <span class="amenity-tag">
                                        <i class="fas fa-check me-1"></i>@amenity
                                    </span>
                                }
                                @if (room.Amenities.Count > 4)
                                {
                                    <span class="amenity-tag">+@(room.Amenities.Count - 4) Other</span>
                                }
                            </div>
                        }
                    </div>
                </div>
            </div>
        }
    }
    else
    {
        <div class="col-12">
            <div class="empty-state">
                <i class="fas fa-bed"></i>
                <h3>No rooms yet</h3>
            </div>
        </div>
    }
</div>

<div id="noResults" class="empty-state" style="display: none;">
    <i class="fas fa-search"></i>
    <h3>No rooms found</h3>
    <p>Try changing the filters or search term</p>
</div>

@section Scripts {
    <script>
        let selectedRooms = new Set();
        
        setTimeout(function() {
            const alerts = document.querySelectorAll('.alert');
            alerts.forEach(alert => {
                const bsAlert = new bootstrap.Alert(alert);
                bsAlert.close();
            });
        }, 5000);
        
        document.addEventListener('DOMContentLoaded', function() {
            loadSelectionFromStorage();
            updateSelectionUI();

            @if (TempData["ClearSessionFlag"] != null)
            {
                @:sessionStorage.removeItem("selectedRooms");
            }
        });
        
        function loadSelectionFromStorage() {
            const stored = sessionStorage.getItem('selectedRooms');
            if (stored) {
                try {
                    selectedRooms = new Set(JSON.parse(stored));
                    
                    selectedRooms.forEach(roomId => {
                        const checkbox = document.querySelector(`input.room-select-checkbox[value="${roomId}"]`);
                        if (checkbox) {
                            checkbox.checked = true;
                            checkbox.closest('.room-card').classList.add('selected');
                        }
                    });
                } catch (e) {
                    console.error('Error loading selection:', e);
                    selectedRooms = new Set();
                }
            }
        }
      
        function saveSelectionToStorage() {
            sessionStorage.setItem('selectedRooms', JSON.stringify([...selectedRooms]));
        }
        
        document.querySelectorAll('.room-select-checkbox').forEach(checkbox => {
            checkbox.addEventListener('change', function() {
                const roomId = this.value;
                const roomCard = this.closest('.room-card');

                if (this.checked) {
                    selectedRooms.add(roomId);
                    roomCard.classList.add('selected');
                } else {
                    selectedRooms.delete(roomId);
                    roomCard.classList.remove('selected');
                }

                updateSelectionUI();
            });
        });
        
        function updateSelectionUI() {
            const count = selectedRooms.size;
            const countText = document.getElementById('selectedCountText');
            const bookBtn = document.getElementById('bookSelectedBtn');

            countText.textContent = count;

            if (count > 0) {
                bookBtn.disabled = false;
            } else {
                bookBtn.disabled = true;
            }
        }
        
        function processSelectedRooms() {
            if (selectedRooms.size === 0) {
                return;
            }
            const checkInInput = document.querySelector('input[name="Checkin"]');
            const checkOutInput = document.querySelector('input[name="Checkout"]');
            console.log(checkInInput.value);

            const checkInDate = checkInInput ? checkInInput.value : null;
            const checkOutDate = checkOutInput ? checkOutInput.value : null;
            saveSelectionToStorage();

            const url = new URL(window.location.origin + '/booking/add-booking');

            if (checkInDate) url.searchParams.set('checkIn', checkInDate);
            if (checkOutDate) url.searchParams.set('checkOut', checkOutDate);

            window.location.href = url.toString();
            
            window.location.href = url.toString();
        }
    </script>
}