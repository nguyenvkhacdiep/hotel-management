@using HotelManagement.Models.Common
@model HotelManagement.Services.Common.PageList<HotelManagement.Services.Dto.BookingResponseModel>

@{
    ViewData["Title"] = "Bookings";
}

@{
    var queryParams = ViewBag.QueryParams as QueryParameters ?? QueryParameters.FromRequest(Context.Request);
    var filters = ViewBag.Filters as List<FilterConfig>;
}

<div class="container-fluid py-4">
    <div class="row mb-4">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center">
                <h2 class="mb-0">Booking Management</h2>
                <a href="@Url.Action("AddBooking", "Booking")" class="btn btn-primary">
                    <i class="bi bi-plus-circle me-2"></i>New Booking
                </a>
            </div>
        </div>
    </div>
    
    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            <i class="bi bi-check-circle-fill"></i> @TempData["SuccessMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    }

    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            <i class="bi bi-exclamation-triangle-fill"></i> @TempData["ErrorMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    }

    <div class="card mb-4">
        <div class="card-body">
            @await Html.PartialAsync("_DynamicFilterPartial", (queryParams, filters, true))
        </div>
    </div>
    
    <div class="card">
        <div class="card-body">
            <div class="row mb-3">
                <div class="col-md-6">
                    <div class="d-flex align-items-center">
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <page-size-selector current-page-size="@queryParams.PageSize"></page-size-selector>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-6 text-end">
                    <span class="text-muted">
                        Showing @(Model != null && Model.Data.Any() ? (Model.PageIndex - 1) * Model.PageSize + 1 : 0) 
                        to @(Model != null ? Math.Min(Model.PageIndex * Model.PageSize, Model.TotalItems) : 0) 
                        of @(Model?.TotalItems ?? 0) entries
                    </span>
                </div>
            </div>
            
            @if (Model.Data != null && Model.Data.Any())
            {
                <div class="table-responsive">
                    <table class="table table-hover align-middle">
                        <thead class="table-light">
                        <tr>
                            <th>Booking ID</th>
                            <th>Customer</th>
                            <th>Room</th>
                            <th>Check-In</th>
                            <th>Check-Out</th>
                            <th>Status</th>
                            <th>Actions</th>
                        </tr>
                        </thead>
                        <tbody>
                        @foreach (var booking in Model.Data)
                        {
                            <tr>
                                <td>
                                    <small class="text-muted">@booking.Id.ToString().Substring(0, 8)...</small>
                                </td>
                                <td>
                                    <div>
                                        <strong>@booking.Customer?.FullName</strong>
                                        <br>
                                        <small class="text-muted">@booking.Customer?.Phone</small>
                                    </div>
                                </td>
                                <td>
                                    <div>
                                        <strong>Room @booking.Room?.RoomNumber</strong>
                                        <br>
                                        <small class="text-muted">@booking.Room?.RoomNumber</small>
                                    </div>
                                </td>
                                <td>
                                    <i class="bi bi-calendar-check text-success me-1"></i>
                                    @booking.CheckInDate.ToString("MMM dd, yyyy")
                                    <br>
                                    <small class="text-muted">@booking.CheckInDate.ToString("hh:mm tt")</small>
                                </td>
                                <td>
                                    <i class="bi bi-calendar-x text-danger me-1"></i>
                                    @booking.CheckOutDate.ToString("MMM dd, yyyy")
                                    <br>
                                    <small class="text-muted">@booking.CheckOutDate.ToString("hh:mm tt")</small>
                                </td>
                                <td>
                                    @switch (booking.Status.ToString())
                                    {
                                        case "Pending":
                                            <span class="badge bg-warning text-dark">Pending</span>
                                            break;
                                        case "Confirmed":
                                            <span class="badge bg-success">Confirmed</span>
                                            break;
                                        case "CheckedIn":
                                            <span class="badge bg-primary">Checked In</span>
                                            break;
                                        case "CheckedOut":
                                            <span class="badge bg-secondary">Checked Out</span>
                                            break;
                                        case "Canceled":
                                            <span class="badge bg-danger">Canceled</span>
                                            break;
                                        default:
                                            <span class="badge bg-light text-dark">@booking.Status</span>
                                            break;
                                    }
                                </td>
                                <td>
                                    <div class="btn-group btn-group-sm" role="group">
                                        <a href="@Url.Action("BookingDetail", "BookingWeb", new { id = booking.Id })"
                                           class="btn btn-outline-primary"
                                           title="View Details">
                                            <i class="fa fa-eye"></i>
                                        </a>
                                        <button type="button"
                                                class="btn btn-outline-danger btn-sm"
                                                data-floor-id="@booking.Id"
                                                onclick="confirmDelete(this)">
                                            <i class="fas fa-trash"></i>
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        }
                        </tbody>
                    </table>
                </div>
                
                @if (Model != null && Model.TotalPages > 1)
                {
                    @await Component.InvokeAsync("Pagination", new { 
                        pageList = Model, 
                        queryParams = queryParams,
                        actionName = "ListRoomPrice"
                    })
                }
            }
            else
            {
                <div class="text-center py-5">
                    <i class="bi bi-inbox display-1 text-muted"></i>
                    <h4 class="mt-3 text-muted">No bookings found</h4>
                    <p class="text-muted">Try adjusting your filters or create a new booking</p>
                </div>
            }
        </div>
    </div>
    
    <div class="modal fade" id="deleteModal" tabindex="-1">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content border-0 shadow">
                <div class="modal-header bg-danger text-white border-0">
                    <h5 class="modal-title">
                        <i class="fas fa-exclamation-triangle me-2"></i> Confirm Delete
                    </h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body p-4">
                    <div class="text-center mb-3">
                        <i class="fas fa-building fa-4x text-danger mb-3"></i>
                    </div>
                    <p class="text-center mb-2">Are you sure you want to delete this record?</p>
                    <div class="alert alert-warning mb-0">
                        <i class="fas fa-exclamation-circle me-2"></i>
                        <small><strong>Warning:</strong> This action cannot be undone!</small>
                    </div>
                </div>
                <div class="modal-footer border-0 bg-light">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                        <i class="fas fa-times"></i> Cancel
                    </button>
                    <form id="deleteForm" method="post" class="d-inline">
                        @Html.AntiForgeryToken()
                        <button type="submit" class="btn btn-danger">
                            <i class="fas fa-trash"></i> Delete Floor
                        </button>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .table th {
        font-weight: 600;
        font-size: 0.875rem;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }
    
    .btn-group-sm > .btn {
        padding: 0.25rem 0.5rem;
    }
    
    .table > tbody > tr:hover {
        background-color: rgba(0, 123, 255, 0.05);
    }
</style>

@section Scripts {
    <script>
        function changePageSize(size) {
            const url = new URL(window.location.href);
            url.searchParams.set('pageSize', size);
            url.searchParams.set('pageNumber', '1');
            window.location.href = url.toString();
        }

        function confirmDelete(button) {
            const floorId = button.getAttribute('data-floor-id');

            document.getElementById('deleteForm').action = 'delete-booking/' + floorId;

            var modal = new bootstrap.Modal(document.getElementById('deleteModal'));
            modal.show();
        }

        setTimeout(function() {
            const alerts = document.querySelectorAll('.alert');
            alerts.forEach(alert => {
                const bsAlert = new bootstrap.Alert(alert);
                bsAlert.close();
            });
        }, 5000);
    </script>
}